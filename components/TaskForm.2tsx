'use client'; 

import React, { useEffect } from 'react';
import { useForm, SubmitHandler, FieldValues, setError } from 'react-hook-form';

interface FormData {
  field1: number;
  field2: number;
}

export default function MyForm() {
  // Инициализация react-hook-form с типами данных
  const { register, handleSubmit, formState: { errors }, watch, setError } = useForm<FormData>();

  // Получаем значения полей
  const field1 = watch('field1');
  const field2 = watch('field2');

  // Функция для отправки формы
  const onSubmit: SubmitHandler<FormData> = (data) => {
    console.log(data);
  };

  // Эффект для проверки на каждом изменении значений
  useEffect(() => {
    // Проверка, что значение в field2 не меньше чем в field1
    if (field2 < field1) {
      // Устанавливаем ошибку для поля field2
      setError('field2', {
        type: 'manual',
        message: 'Значение в поле 2 не может быть меньше, чем в поле 1',
      });
    } else {
      // Если ошибка была ранее, удаляем её
      if (errors.field2) {
        setError('field2', { type: 'manual', message: '' });
      }
    }
  }, [field1, field2, setError, errors.field2]);

  return (
    <div className="min-h-screen flex justify-center items-center p-6">
      <div className="w-full max-w-md bg-white p-8 rounded-lg shadow-lg">
        <h1 className="text-2xl font-semibold mb-6">Форма с валидацией</h1>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* Поле ввода 1 */}
          <div className="flex flex-col">
            <label htmlFor="field1" className="mb-1">Поле 1</label>
            <input
              id="field1"
              type="number"
              {...register('field1', {
                required: 'Это поле обязательно',
              })}
              className="border p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {errors.field1 && (
              <span className="text-red-500 text-sm">{errors.field1.message}</span>
            )}
          </div>

          {/* Поле ввода 2 */}
          <div className="flex flex-col">
            <label htmlFor="field2" className="mb-1">Поле 2</label>
            <input
              id="field2"
              type="number"
              {...register('field2', {
                required: 'Это поле обязательно',
              })}
              className="border p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {errors.field2 && (
              <span className="text-red-500 text-sm">{errors.field2.message}</span>
            )}
          </div>

          {/* Кнопка отправки */}
          <button type="submit" className="bg-blue-500 text-white p-3 rounded-md w-full">
            Отправить
          </button>
        </form>
      </div>
    </div>
  );
}